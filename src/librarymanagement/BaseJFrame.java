/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarymanagement;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Sandeep
 */
public class BaseJFrame extends javax.swing.JFrame {

    /**
     * Creates new form BaseJFrame
     */
    public BaseJFrame() {
        initComponents();
        try{
            createDBConnection();
        }catch(java.sql.SQLException|ClassNotFoundException e){
            //javax.swing.JOptionPane.showMessageDialog(this,"Unable to establish database connection.","DB error",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.err.println("Unable to establish database connection.");
            System.exit(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FinesFilterbuttonGroup = new javax.swing.ButtonGroup();
        AddUserTab = new javax.swing.JTabbedPane();
        AddUserjPanel = new javax.swing.JPanel();
        RegisterNewUserjLabel = new javax.swing.JLabel();
        NamejLabel = new javax.swing.JLabel();
        FirstNamejTextField = new javax.swing.JTextField("",20);
        LastNamejTextField = new javax.swing.JTextField("",20);
        NamejLabel1 = new javax.swing.JLabel();
        PhonejLabel = new javax.swing.JLabel();
        MaskFormatter phoneFormatter = null;
        try{
            phoneFormatter = new javax.swing.text.MaskFormatter("(###) ###-####");
            phoneFormatter.setPlaceholderCharacter('0');
        }catch(ParseException e){System.err.println("Parse Error in mask formatter");}
        PhonejFormattedTextField = new JFormattedTextField(phoneFormatter);

        ;
        MaskFormatter ssnFormatter = null;
        try{
            ssnFormatter = new javax.swing.text.MaskFormatter("###-##-####");
            ssnFormatter.setPlaceholderCharacter('0');
        }catch(ParseException e){System.err.println("Parse Error in mask formatter");}
        SSNjFormattedTextField = new JFormattedTextField(ssnFormatter);

        ;
        AddressjLabel = new javax.swing.JLabel();
        AddressL1jTextField = new JTextField("",26);
        AddressL2jTextField = new JTextField("",26);
        CityjTextField = new JTextField("",50);
        StatejComboBox = new javax.swing.JComboBox<>();
        RegisterUserjButton = new javax.swing.JButton();
        BookCheckoutjPanel = new javax.swing.JPanel();
        BooksCheckoutjLabel = new javax.swing.JLabel();
        SearchjTextField = new javax.swing.JTextField();
        SearchjTextField.setForeground(Color.GRAY);
        SearchjTextField.setFont(new Font("Tahoma",Font.ITALIC,11));
        SearchjTextField.setText("Enter ISBN, Book name, Author name");
        BCSearchjButton = new javax.swing.JButton();
        BCSearchjButton.setEnabled(false);
        BCResjScrollPane = new javax.swing.JScrollPane();
        String[] BCResjTableColumnNames = {"ISBN", "Title", "Author(s)", "Availability"};
        BCResjTableData = new DefaultTableModel(BCResjTableColumnNames,5){
            public boolean isCellEditable(int row,int column){
                return false;
            }
        };
        BCResjTable = new javax.swing.JTable(BCResjTableData);
        BCResjTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Only allow one row to be selected at a time

        //Colour availability Column based on data
        BCResjTable.setDefaultRenderer(Object.class, new DefaultTableCellRenderer(){
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
                Component c =  super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (column != 3)
                return c;
                else if(((String)value).equals("IN"))
                c.setBackground(Color.GREEN);
                else
                c.setBackground(Color.RED);
                return c;
            }
        });
        BCBorrowerCardjLabel = new javax.swing.JLabel();
        BCBorrowerCardjTextField = new javax.swing.JTextField(6)
        ;
        BCCheckoutjButton = new javax.swing.JButton();
        BCCheckoutjButton.setEnabled(false);
        CheckInjPanel = new javax.swing.JPanel();
        CheckInjLabel = new javax.swing.JLabel();
        CheckInSearchjTextField = new javax.swing.JTextField();
        CheckInSearchjTextField.setForeground(Color.GRAY);
        CheckInSearchjTextField.setFont(new Font("Tahoma",Font.ITALIC,11));
        CheckInSearchjTextField.setText("Enter ISBN, Borrower Card No.,Borrower name");
        CheckInSearchjButton = new javax.swing.JButton();
        CheckInSearchjButton.setEnabled(false);
        CheckInjScrollPane = new javax.swing.JScrollPane();
        String[] CheckInResjTableColumnNames = {"Loan ID","ISBN","Borrower Card No."};
        CheckInResjTableData = new DefaultTableModel(CheckInResjTableColumnNames,5){
            public boolean isCellEditable(int row,int col){
                return false;
            }
        };
        CheckInjTable = new javax.swing.JTable(CheckInResjTableData);
        CheckInjTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Only allow one row to be selected at a time
        CheckInjButton = new javax.swing.JButton();
        CheckInjButton.setEnabled(false);
        FinesjPanel = new javax.swing.JPanel();
        FinesjLabel = new javax.swing.JLabel();
        FinesFilterjLabel = new javax.swing.JLabel();
        FinesFilterAlljRadioButton = new javax.swing.JRadioButton();
        FinesFilterUnpaidjRadioButton = new javax.swing.JRadioButton();
        ShowFinesjButton = new javax.swing.JButton();
        FinesjScrollPane = new javax.swing.JScrollPane();
        String[] FinesjTableColumnNames = {"Borrower ID", "Total Fine", "Payable Fine"};
        FinesjTableData = new DefaultTableModel(FinesjTableColumnNames,5){
            public boolean isCellEditable(int row,int col){
                return false;
            }
        };
        FinesjTable = new javax.swing.JTable(FinesjTableData);
        ;
        FinesjTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Only allow one row to be selected at a time

        FinesjTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            //when each row is selected fill in the borrower id and number fields appropriately.
            public void valueChanged(ListSelectionEvent e){
                FinesBorrowerIDjTextField.setText((String)FinesjTable.getValueAt(FinesjTable.getSelectedRow(), 0));
                FinesPayAmountjFormattedTextField.setText((String)FinesjTable.getValueAt(FinesjTable.getSelectedRow(), 2));
            }
        });
        FinesBorrowerIDjLabel = new javax.swing.JLabel();
        FinesBorrowerIDjTextField = new javax.swing.JTextField(6);
        FinesBorrowerIDjTextField.setEnabled(false);
        FinesPayAmountjLabel = new javax.swing.JLabel();
        FinesPayAmountjFormattedTextField = new javax.swing.JFormattedTextField();
        FinesPayAmountjFormattedTextField.setEnabled(false);
        FinesPayjButton = new javax.swing.JButton();
        FinesUpdatejButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 300, 300));
        setMaximumSize(new java.awt.Dimension(300, 300));
        setSize(new java.awt.Dimension(300, 300));

        AddUserTab.setBackground(new java.awt.Color(255, 255, 255));
        AddUserTab.setMaximumSize(new java.awt.Dimension(300, 300));

        AddUserjPanel.setBackground(new java.awt.Color(255, 255, 255));
        AddUserjPanel.setMaximumSize(new java.awt.Dimension(300, 300));

        RegisterNewUserjLabel.setBackground(java.awt.Color.black);
        RegisterNewUserjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RegisterNewUserjLabel.setForeground(new java.awt.Color(255, 255, 255));
        RegisterNewUserjLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        RegisterNewUserjLabel.setText("Register New User  ");
        RegisterNewUserjLabel.setOpaque(true);

        NamejLabel.setText("NAME");

        FirstNamejTextField.setToolTipText("First Name");
        FirstNamejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FirstNamejTextFieldKeyTyped(evt);
            }
        });

        LastNamejTextField.setToolTipText("Last Name");
        LastNamejTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                LastNamejTextFieldKeyTyped(evt);
            }
        });

        NamejLabel1.setText("SSN");

        PhonejLabel.setText("PHONE");

        PhonejFormattedTextField.setToolTipText("Phone Number");

        SSNjFormattedTextField.setToolTipText("SSN");

        AddressjLabel.setText("ADDRESS");

        AddressL1jTextField.setToolTipText("Address Line 1");
        AddressL1jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddressL1jTextFieldKeyTyped(evt);
            }
        });

        AddressL2jTextField.setToolTipText("Address Line 2 (optional)");
        AddressL2jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                AddressL2jTextFieldKeyTyped(evt);
            }
        });

        CityjTextField.setToolTipText("City");
        CityjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                CityjTextFieldKeyTyped(evt);
            }
        });

        StatejComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY" }));
        StatejComboBox.setToolTipText("State");

        RegisterUserjButton.setText("Register");
        RegisterUserjButton.setToolTipText("Register new user");
        RegisterUserjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterUserjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddUserjPanelLayout = new javax.swing.GroupLayout(AddUserjPanel);
        AddUserjPanel.setLayout(AddUserjPanelLayout);
        AddUserjPanelLayout.setHorizontalGroup(
            AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddUserjPanelLayout.createSequentialGroup()
                .addComponent(RegisterNewUserjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(AddUserjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NamejLabel)
                    .addComponent(PhonejLabel)
                    .addComponent(NamejLabel1)
                    .addComponent(AddressjLabel))
                .addGap(18, 18, 18)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RegisterUserjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SSNjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddUserjPanelLayout.createSequentialGroup()
                        .addComponent(FirstNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LastNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PhonejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddressL1jTextField)
                    .addComponent(AddressL2jTextField)
                    .addGroup(AddUserjPanelLayout.createSequentialGroup()
                        .addComponent(CityjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(StatejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AddUserjPanelLayout.setVerticalGroup(
            AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddUserjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegisterNewUserjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NamejLabel)
                    .addComponent(FirstNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LastNamejTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NamejLabel1)
                    .addComponent(SSNjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PhonejFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PhonejLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddressL1jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddressjLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddressL2jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(AddUserjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CityjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StatejComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(RegisterUserjButton)
                .addGap(19, 19, 19))
        );

        AddUserTab.addTab("Add User", AddUserjPanel);

        BookCheckoutjPanel.setBackground(new java.awt.Color(255, 255, 255));

        BooksCheckoutjLabel.setBackground(java.awt.Color.black);
        BooksCheckoutjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BooksCheckoutjLabel.setForeground(new java.awt.Color(255, 255, 255));
        BooksCheckoutjLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        BooksCheckoutjLabel.setText("Books Checkout  ");
        BooksCheckoutjLabel.setOpaque(true);

        SearchjTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                SearchjTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                SearchjTextFieldFocusLost(evt);
            }
        });
        SearchjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchjTextFieldKeyReleased(evt);
            }
        });

        BCSearchjButton.setText("SEARCH");
        BCSearchjButton.setToolTipText("Search books");
        BCSearchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCSearchjButtonActionPerformed(evt);
            }
        });

        BCResjScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        BCResjScrollPane.setPreferredSize(new Dimension(BCResjTable.getSize().width , BCResjTable.getRowHeight()*5));

        BCResjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ISBN", "Title", "Author(s)", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BCResjScrollPane.setViewportView(BCResjTable);

        BCResjScrollPane.setPreferredSize(new Dimension(BCResjTable.getSize().width , BCResjTable.getRowHeight()*5));

        BCBorrowerCardjLabel.setBackground(new java.awt.Color(255, 255, 255));
        BCBorrowerCardjLabel.setText("Borrower Card No.");
        BCBorrowerCardjLabel.setOpaque(true);

        BCBorrowerCardjTextField.setToolTipText("Enter borrower's card number");
        BCBorrowerCardjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                BCBorrowerCardjTextFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BCBorrowerCardjTextFieldKeyTyped(evt);
            }
        });

        BCCheckoutjButton.setText("CHECKOUT");
        BCCheckoutjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCCheckoutjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BookCheckoutjPanelLayout = new javax.swing.GroupLayout(BookCheckoutjPanel);
        BookCheckoutjPanel.setLayout(BookCheckoutjPanelLayout);
        BookCheckoutjPanelLayout.setHorizontalGroup(
            BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                .addComponent(BooksCheckoutjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                        .addComponent(SearchjTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BCSearchjButton))
                    .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                        .addGroup(BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BCResjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                                .addComponent(BCBorrowerCardjLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BCBorrowerCardjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(BCCheckoutjButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        BookCheckoutjPanelLayout.setVerticalGroup(
            BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BookCheckoutjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BooksCheckoutjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BCSearchjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(BCResjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(BookCheckoutjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BCBorrowerCardjLabel)
                    .addComponent(BCBorrowerCardjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BCCheckoutjButton)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        AddUserTab.addTab("Books Checkout", BookCheckoutjPanel);

        CheckInjPanel.setBackground(new java.awt.Color(255, 255, 255));

        CheckInjLabel.setBackground(java.awt.Color.black);
        CheckInjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CheckInjLabel.setForeground(new java.awt.Color(255, 255, 255));
        CheckInjLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        CheckInjLabel.setText("Books Check-In  ");
        CheckInjLabel.setOpaque(true);

        CheckInSearchjTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CheckInSearchjTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CheckInSearchjTextFieldFocusLost(evt);
            }
        });
        CheckInSearchjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CheckInSearchjTextFieldKeyReleased(evt);
            }
        });

        CheckInSearchjButton.setBackground(new java.awt.Color(255, 255, 255));
        CheckInSearchjButton.setText("SEARCH");
        CheckInSearchjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckInSearchjButtonActionPerformed(evt);
            }
        });

        CheckInjScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        CheckInjScrollPane.setPreferredSize(new Dimension(CheckInjTable.getSize().width , CheckInjTable.getRowHeight()*5));

        CheckInjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Loan ID", "ISBN", "Borrower Card No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        CheckInjScrollPane.setViewportView(CheckInjTable);

        CheckInjButton.setBackground(new java.awt.Color(255, 255, 255));
        CheckInjButton.setText("Check In");
        CheckInjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckInjButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CheckInjPanelLayout = new javax.swing.GroupLayout(CheckInjPanel);
        CheckInjPanel.setLayout(CheckInjPanelLayout);
        CheckInjPanelLayout.setHorizontalGroup(
            CheckInjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckInjPanelLayout.createSequentialGroup()
                .addComponent(CheckInjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(CheckInjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CheckInjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CheckInjPanelLayout.createSequentialGroup()
                        .addComponent(CheckInSearchjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckInSearchjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CheckInjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CheckInjPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CheckInjButton)
                .addContainerGap())
        );
        CheckInjPanelLayout.setVerticalGroup(
            CheckInjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CheckInjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CheckInjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(CheckInjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckInSearchjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckInSearchjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CheckInjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CheckInjButton)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        AddUserTab.addTab("Books Check-In", CheckInjPanel);

        FinesjPanel.setBackground(new java.awt.Color(255, 255, 255));

        FinesjLabel.setBackground(java.awt.Color.black);
        FinesjLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        FinesjLabel.setForeground(new java.awt.Color(255, 255, 255));
        FinesjLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        FinesjLabel.setText("Fines  ");
        FinesjLabel.setOpaque(true);

        FinesFilterjLabel.setText("Filter:");

        FinesFilterAlljRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        FinesFilterbuttonGroup.add(FinesFilterAlljRadioButton);
        FinesFilterAlljRadioButton.setSelected(true);
        FinesFilterAlljRadioButton.setText("ALL");

        FinesFilterUnpaidjRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        FinesFilterbuttonGroup.add(FinesFilterUnpaidjRadioButton);
        FinesFilterUnpaidjRadioButton.setText("Unpaid");

        ShowFinesjButton.setBackground(new java.awt.Color(255, 255, 255));
        ShowFinesjButton.setText("Show Fines");
        ShowFinesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowFinesjButtonActionPerformed(evt);
            }
        });

        FinesjScrollPane.setPreferredSize(new Dimension(FinesjTable.getSize().width , FinesjTable.getRowHeight()*5));

        FinesjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Borrower ID", "Total Fine", "Payable Fine"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FinesjScrollPane.setViewportView(FinesjTable);

        FinesBorrowerIDjLabel.setBackground(new java.awt.Color(255, 255, 255));
        FinesBorrowerIDjLabel.setText("Borrower ID:");

        FinesPayAmountjLabel.setBackground(new java.awt.Color(255, 255, 255));
        FinesPayAmountjLabel.setText("Amount");

        FinesPayAmountjFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("$#,##0.00"))));
        FinesPayAmountjFormattedTextField.setText("0.00");

        FinesPayjButton.setBackground(new java.awt.Color(255, 255, 255));
        FinesPayjButton.setText("Pay");
        FinesPayjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinesPayjButtonActionPerformed(evt);
            }
        });

        FinesUpdatejButton.setBackground(new java.awt.Color(255, 255, 255));
        FinesUpdatejButton.setText("Update Fines");

        javax.swing.GroupLayout FinesjPanelLayout = new javax.swing.GroupLayout(FinesjPanel);
        FinesjPanel.setLayout(FinesjPanelLayout);
        FinesjPanelLayout.setHorizontalGroup(
            FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FinesjPanelLayout.createSequentialGroup()
                .addComponent(FinesjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(FinesjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FinesjPanelLayout.createSequentialGroup()
                        .addComponent(FinesFilterjLabel)
                        .addGap(18, 18, 18)
                        .addComponent(FinesFilterAlljRadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(FinesFilterUnpaidjRadioButton)
                        .addGap(27, 27, 27)
                        .addComponent(ShowFinesjButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(FinesjPanelLayout.createSequentialGroup()
                        .addGroup(FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FinesjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(FinesjPanelLayout.createSequentialGroup()
                                .addComponent(FinesBorrowerIDjLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FinesBorrowerIDjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FinesPayAmountjLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FinesPayAmountjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(FinesPayjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FinesjPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(FinesUpdatejButton)))
                .addContainerGap())
        );
        FinesjPanelLayout.setVerticalGroup(
            FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FinesjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FinesjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FinesFilterjLabel)
                    .addComponent(FinesFilterAlljRadioButton)
                    .addComponent(FinesFilterUnpaidjRadioButton)
                    .addComponent(ShowFinesjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FinesjScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(FinesjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FinesBorrowerIDjLabel)
                    .addComponent(FinesBorrowerIDjTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FinesPayAmountjLabel)
                    .addComponent(FinesPayAmountjFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FinesPayjButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(FinesUpdatejButton)
                .addGap(48, 48, 48))
        );

        AddUserTab.addTab("Fines", FinesjPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddUserTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AddUserTab, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        AddUserTab.getAccessibleContext().setAccessibleName("AddUserTab");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddressL1jTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddressL1jTextFieldKeyTyped
        char c = evt.getKeyChar();
        if((!(Character.isLetterOrDigit(c)||Character.isSpaceChar(c)))||(AddressL1jTextField.getText().length()>50))
            evt.consume();
    }//GEN-LAST:event_AddressL1jTextFieldKeyTyped

    private void AddressL2jTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_AddressL2jTextFieldKeyTyped
        char c = evt.getKeyChar();
        if((!(Character.isLetterOrDigit(c)||Character.isSpaceChar(c)))||(AddressL1jTextField.getText().length()>50))
            evt.consume();
    }//GEN-LAST:event_AddressL2jTextFieldKeyTyped

    private void CityjTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CityjTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(!Character.isLetter(c))
            evt.consume();
    }//GEN-LAST:event_CityjTextFieldKeyTyped

    private void RegisterUserjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterUserjButtonActionPerformed
        //Insert values into db
        try{
            RegisterUserjButton.setEnabled(false);
            String insertUserString = "INSERT INTO BORROWER (SSN , BNAME , ADDRESS , PHONE) VALUES (?,?,?,?)";
            PreparedStatement insertUser = dbConnection.prepareStatement(insertUserString);
            insertUser.setString(0, SSNjFormattedTextField.getText());
            insertUser.setString(1, NamejLabel.getText()+" "+NamejLabel1.getText());
            if(AddressL2jTextField.getText().length()>0)
                insertUser.setString(2, AddressL1jTextField.getText()+","+AddressL2jTextField.getText()+","+CityjTextField.getText()+","+StatejComboBox.getSelectedItem().toString());
            else
                insertUser.setString(2, AddressL1jTextField.getText()+","+CityjTextField.getText()+","+StatejComboBox.getSelectedItem().toString());
            insertUser.setString(3, PhonejFormattedTextField.getText());
            
            insertUser.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Borrower successfully added to system.", "Success", JOptionPane.INFORMATION_MESSAGE);
            RegisterUserjButton.setEnabled(true);
        }catch(SQLException e){
            System.err.println("Inserting user into db failed!   ");
            if (e.getErrorCode()==MYSQL_DUPLICATE_PK_ERROR_CODE){
                JOptionPane.showMessageDialog(this, "Borrower with this SSN exists.", "Duplicate SSN Error", JOptionPane.ERROR_MESSAGE);
            }else{}
        }
    }//GEN-LAST:event_RegisterUserjButtonActionPerformed

    private void FirstNamejTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FirstNamejTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isLetter(c) || c=='\'' || c=='-' || c=='-'))
            evt.consume();
    }//GEN-LAST:event_FirstNamejTextFieldKeyTyped

    private void LastNamejTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LastNamejTextFieldKeyTyped
        char c = evt.getKeyChar();
        if(!(Character.isLetter(c) || c=='\'' || c=='-' || c=='-'))
            evt.consume();
    }//GEN-LAST:event_LastNamejTextFieldKeyTyped

    private void SearchjTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchjTextFieldFocusGained
        if (SearchjTextField.getForeground()== Color.GRAY){
            SearchjTextField.setForeground(Color.BLACK);
            SearchjTextField.setFont(new Font("Tahoma",Font.PLAIN,11));
            SearchjTextField.setText("");
            BCSearchjButton.setEnabled(false);
        }else{}
    }//GEN-LAST:event_SearchjTextFieldFocusGained

    private void SearchjTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SearchjTextFieldFocusLost
        if (SearchjTextField.getText().length()== 0){
            SearchjTextField.setForeground(Color.GRAY);
            SearchjTextField.setFont(new Font("Tahoma",Font.ITALIC,11));
            SearchjTextField.setText("Enter ISBN, Book name, Author name");
            BCSearchjButton.setEnabled(false);
        }else{}
    }//GEN-LAST:event_SearchjTextFieldFocusLost

    private void SearchjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchjTextFieldKeyReleased
        if(SearchjTextField.getText().length()==0)
            BCSearchjButton.setEnabled(false);
        else
            BCSearchjButton.setEnabled(true);
    }//GEN-LAST:event_SearchjTextFieldKeyReleased

    private void BCBorrowerCardjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BCBorrowerCardjTextFieldKeyReleased
        if(BCBorrowerCardjTextField.getText().length()==0)
            BCCheckoutjButton.setEnabled(false);
        else{//some text is in borrower card number field
            if((BCResjTable.getSelectedRowCount()!=0) && (BCResjTableData!=null) && (BCResjTableData.getValueAt(BCResjTable.getSelectedRow(), 3)).equals("IN")/*(((String)(BCResjTableData.getValueAt(BCResjTable.getSelectedRow(), 3))).equals("IN"))*/)
                //some row in the table has been selected
                BCCheckoutjButton.setEnabled(true);
            else;
        }
    }//GEN-LAST:event_BCBorrowerCardjTextFieldKeyReleased

    private void BCBorrowerCardjTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BCBorrowerCardjTextFieldKeyTyped
        if(!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_BCBorrowerCardjTextFieldKeyTyped

    private void BCCheckoutjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCCheckoutjButtonActionPerformed
        //validate all necessary conditions
        String borrower_card_number = BCBorrowerCardjTextField.getText();
        int selected_row_index = BCResjTable.getSelectedRow();
        if(!borrower_card_number.matches("\\d+(\\d+)?")){
            JOptionPane.showMessageDialog(this, "Please enter a valid Borrower card number.", "Invalid Borrower Card Number", JOptionPane.ERROR_MESSAGE);
            BCBorrowerCardjTextField.setText("");
            return;
        }else;
        if(selected_row_index == -1){
            JOptionPane.showMessageDialog(this, "Please select a book from table.", "No selection", JOptionPane.ERROR_MESSAGE);
            return;
        }else;
        //Might not be necessary
        if(BCResjTable.getSelectedRowCount()>1){
            JOptionPane.showMessageDialog(this, "Please select a single book from table.", "Multiple selection", JOptionPane.ERROR_MESSAGE);
            return;
        }else;
        
        try {
            //Don't permit check out if borrower already owns 3 (MAX_BOOKS_PER_BORROWER) books
            borrower_possession_ps.clearParameters();
            borrower_possession_ps.setString(1,borrower_card_number);
            ResultSet rs = borrower_possession_ps.executeQuery();
            //rs will contain exactly one row and one column
            rs.next();
            int possession = rs.getInt("POSSESSION");
            if (possession == 3){
                JOptionPane.showMessageDialog(this, "Borrower already holds the permitted quota.", "Limit Reached", JOptionPane.ERROR_MESSAGE);
                return;
            }else;
            
            //Issue the book
            String selected_isbn = (String) BCResjTableData.getValueAt(selected_row_index, 0);
            book_checkout_ps.clearParameters();
            book_checkout_ps.setString(1,selected_isbn);
            book_checkout_ps.setString(2, borrower_card_number);
            book_checkout_ps.executeUpdate();
            BCResjTableData.setValueAt("OUT", selected_row_index, 3);
            JOptionPane.showMessageDialog(this, "Book has been loaned to borrower.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            System.err.println("SQL Exception when Book Checkout button pressed.");
        }
    }//GEN-LAST:event_BCCheckoutjButtonActionPerformed

    private void BCSearchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCSearchjButtonActionPerformed
        //SEARCH FUNCTIONALITY
        String search_string = SearchjTextField.getText();
        //just in case:
        if (search_string.length()==0)
            return;
        else;
        
        String[] keywords = search_string.split(" ");
        String statement_string = "SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE";
        ArrayList<String> parameters = new ArrayList<>();
        ResultSet rs = null;
        HashMap ISBNset = new HashMap();
        Vector<Vector<String/*Object*/>> rsData = new Vector<>();
        Vector<String> columnNames = new Vector<>();
        //ArrayList<ArrayList<String/*Object*/>> processed_rsData = new ArrayList<>(); //Contains authors in one row
        try{
            columnNames.clear();
            rsData.clear();
            //Only one keyword case
            if(keywords.length == 1){
                String keyword = keywords[0];
                if(keyword.matches("\\d{10}")){
                    //ISBN or title entered
                    //statement_string = "SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE ISBN = ? OR TITLE LIKE ?";
                    single_key_10_digits_ps.clearParameters();
                    single_key_10_digits_ps.setString(1, keyword);
                    single_key_10_digits_ps.setString(2, "%"+keyword+"%");
                    rs = single_key_10_digits_ps.executeQuery();
                }else if(keyword.matches("\\d+")){
                    //title entered
                    single_key_multi_digits_ps.clearParameters();
                    single_key_multi_digits_ps.setString(1, "%"+keyword+"%");
                    rs = single_key_multi_digits_ps.executeQuery();
                }else if(keyword.matches("[a-zA-Z]+")){
                    //title or author entered
                    single_key_alpha_ps.clearParameters();
                    single_key_alpha_ps.setString(1, "%"+keyword+"%");
                    single_key_alpha_ps.setString(2, "%"+keyword+"%");
                    rs = single_key_alpha_ps.executeQuery();
                }else if(keyword.matches("\\w+")){
                    //title entered
                    single_key_alnum_ps.clearParameters();
                    single_key_alnum_ps.setString(1, "%"+keyword+"%");
                    rs = single_key_alnum_ps.executeQuery();
                }else;
            }else{
            //Multiple keywords case
                for(String keyword:keywords){
                    if(keyword.matches("\\d{10}")){
                        statement_string += " ISBN = ? OR TITLE LIKE ?";
                        parameters.add(keyword);
                        parameters.add("%"+keyword+"%");
                    }else if(keyword.matches("\\d+")){
                        statement_string += " TITLE LIKE ?";
                        parameters.add("%"+keyword+"%");
                    }else if(keyword.matches("[a-zA-Z]+")){
                        statement_string += " TITLE LIKE ? OR NAME LIKE ?";
                        parameters.add("%"+keyword+"%");
                        parameters.add("%"+keyword+"%");
                    }else if(keyword.matches("\\w+")){
                        statement_string += " TITLE LIKE ?";
                        parameters.add("%"+keyword+"%");
                    }else;
                }
                
                multi_key_ps = dbConnection.prepareStatement(statement_string);
                for(int i=0;i<parameters.size();++i)
                    multi_key_ps.setString(i, parameters.get(i));
                
                rs = multi_key_ps.executeQuery();
            }
            
            //Operate on rs
            if(rs==null){
                JOptionPane.showMessageDialog(this, "No results found.", "Success", JOptionPane.INFORMATION_MESSAGE);
                return;
            }else;
            ResultSetMetaData rsmeta = rs.getMetaData();
            int columnCount = rsmeta.getColumnCount();
            while(rs.next()){
                if(ISBNset.containsKey(rs.getString(1))){
                    //If ISBN has been seen before, simply add author to list of authors. Do NOT add to list of books i.e. rsData
                    ISBNset.put(rs.getString(1), ((String)ISBNset.get(rs.getString(1)))+","+rs.getString(3));
                    continue;
                }else
                    ISBNset.put(rs.getString(1), rs.getString(3));
                
                Vector<String> row = new Vector<>();
                for(int i=1;i<=columnCount;++i){
                    row.add(rs.getString(i));
                    columnNames.add(rsmeta.getColumnName(i));
                }
                rsData.add(row);    
            }
            
            //Update list of authors
            Vector<String>row;
            for(int i=0;i<rsData.size();++i){
                String authors = (String)ISBNset.get(rsData.get(i).get(0));
                if(authors.contains(",")){
                    row = rsData.get(i);
                    row.set(2,authors);
                    rsData.set(i,row);
                    //rsData.get(i).set(2,authors);// WILL THIS WORK?
                }else;
            }
            //rsData now contains the data to be displayed.
            BCResjTableData.setDataVector(rsData, columnNames);
        }catch(SQLException e){System.err.println("SQL Exception in Search button press in checkout.");}
    }//GEN-LAST:event_BCSearchjButtonActionPerformed

    private void CheckInSearchjTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CheckInSearchjTextFieldFocusGained
        if (CheckInSearchjTextField.getForeground()== Color.GRAY){
            CheckInSearchjTextField.setForeground(Color.BLACK);
            CheckInSearchjTextField.setFont(new Font("Tahoma",Font.PLAIN,11));
            CheckInSearchjTextField.setText("");
            CheckInSearchjButton.setEnabled(false);
        }else{}
    }//GEN-LAST:event_CheckInSearchjTextFieldFocusGained

    private void CheckInSearchjTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CheckInSearchjTextFieldFocusLost
        if (CheckInSearchjTextField.getText().length()== 0){
            CheckInSearchjTextField.setForeground(Color.GRAY);
            CheckInSearchjTextField.setFont(new Font("Tahoma",Font.ITALIC,11));
            CheckInSearchjTextField.setText("Enter ISBN, Borrower Card No.,Borrower name");
            CheckInSearchjButton.setEnabled(false);
        }else{}
    }//GEN-LAST:event_CheckInSearchjTextFieldFocusLost

    private void CheckInSearchjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CheckInSearchjTextFieldKeyReleased
        if(SearchjTextField.getText().length()==0)
            CheckInSearchjButton.setEnabled(false);
        else
            CheckInSearchjButton.setEnabled(true);
    }//GEN-LAST:event_CheckInSearchjTextFieldKeyReleased

    private void CheckInSearchjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInSearchjButtonActionPerformed
        String search_string = CheckInSearchjTextField.getText();
        if(search_string.length()==0)
            return;
        else;
        String keyword = search_string.split("")[0];
        ResultSet rs = null;
        try{
            if(keyword.matches("\\d{10}")){
                //ISBN entered
                check_in_ISBN_ps.clearParameters();
                check_in_ISBN_ps.setString(1,keyword);
                rs = check_in_ISBN_ps.executeQuery();
            }else if(keyword.matches("\\d+")){
                //Borrower card no entered
                check_in_Card_Id_ps.clearParameters();
                check_in_Card_Id_ps.setString(1,keyword);
                rs = check_in_Card_Id_ps.executeQuery();
            }else if(keyword.matches("\\[a-zA-z]+")){
                //name of borrower entered
                check_in_Name_ps.clearParameters();
                check_in_Name_ps.setString(1,"%"+keyword+"%");
                rs = check_in_Name_ps.executeQuery();
            }else{
                JOptionPane.showMessageDialog(this, "Search by ISBN, Borrower Card No., Borrower name only.", "Invalid Search String", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if(rs==null){
               JOptionPane.showMessageDialog(this, "No results found.", "Success", JOptionPane.INFORMATION_MESSAGE);
               return;
            }else;
            
            //put data in table
            CheckInResjTableData.setRowCount(0);
            while(rs.next()){
                Vector<String> row = new Vector<>();
                row.add(rs.getString(1));
                row.add(rs.getString(2));
                row.add(rs.getString(3));
                CheckInResjTableData.addRow(row);
            }
            //Hopefully this should bring about an update to the GUI table. If not, add code to do that explicitly below
            //CheckInjTable.setModel(BCResjTableData);
            System.out.println("Check In result table populated.");
        }catch(SQLException sqle){
            System.err.println("SQL Exception in Check-In Search button press.");
        }
    }//GEN-LAST:event_CheckInSearchjButtonActionPerformed

    private void CheckInjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInjButtonActionPerformed
        int CheckInSelectedRowIndex = CheckInjTable.getSelectedRow();
        if(CheckInSelectedRowIndex == -1)
            return;
        else;
        
        String selected_Loan_ID = (String)CheckInjTable.getValueAt(CheckInSelectedRowIndex, 0);
        try {
            check_in_update_ps.clearParameters();
            check_in_update_ps.setString(1,selected_Loan_ID);
            check_in_update_ps.executeUpdate();
            CheckInResjTableData.removeRow(CheckInSelectedRowIndex);
            JOptionPane.showMessageDialog(this, "Book checked in.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            System.err.println("SQL Exception in Check in button actionPerformed.");
        }
    }//GEN-LAST:event_CheckInjButtonActionPerformed

    private void ShowFinesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowFinesjButtonActionPerformed
        /*
            Select all fines for every person and populate first two column of table.
            Select all payable fines for every person and update last column of table.       
        */
        ResultSet rs = null;
        HashMap totalFines = new HashMap();
        try{
            if(FinesFilterAlljRadioButton.isSelected())
                rs = getFines.executeQuery("SELECT CARD_ID, SUM(FINE_AMT) FROM FINES NATURAL JOIN BOOK_LOANS_LITE GROUP BY CARD_ID");
            else
                rs = getFines.executeQuery("SELECT CARD_ID, SUM(FINE_AMT) FROM FINES NATURAL JOIN BOOK_LOANS_LITE WHERE PAID = FALSE GROUP BY CARD_ID");
            
            
            if(rs==null){
                JOptionPane.showMessageDialog(this, "No Fines in database.", "No Fines", JOptionPane.INFORMATION_MESSAGE);
                return;
            }else;
            
            while(rs.next()){
                totalFines.put(rs.getString(1),rs.getString(2));
            }
            
            //get payable fine amount
            rs = getFines.executeQuery("SELECT CARD_ID, SUM(FINE_AMT) FROM FINES NATURAL JOIN BOOK_LOANS_LITE WHERE PAID = FALSE AND DATE_IN IS NOT NULL GROUP BY CARD_ID");
            
            //populate table
            FinesjTableData.setRowCount(0);
            String card_id, amt;
            Vector<String> row = new Vector<>();
            while(rs.next()){
                row.clear();
                card_id = rs.getString(1);
                amt = rs.getString(2);
                row.add(card_id); //borrower card no.
                row.add((String)totalFines.get(card_id)); //total fine amount
                row.add(amt); //payable fine amount
                FinesjTableData.addRow(row);
                totalFines.remove(card_id); //delete the card_id from fines map
            }
            
            //fill in rest - those with no payable fines (probably still holding on to books) with 0.00
            for(Object key : totalFines.keySet()){
                row.clear();
                row.add((String)key);
                row.add((String)totalFines.get(key));
                row.add("0.00");
                FinesjTableData.addRow(row);
            }
        }catch(SQLException e){
            System.err.println("Error in Show Fines Button ActionPerformed.");
        }
    }//GEN-LAST:event_ShowFinesjButtonActionPerformed

    private void FinesPayjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinesPayjButtonActionPerformed
        String card_id = FinesBorrowerIDjTextField.getText();
        String amt = FinesPayAmountjFormattedTextField.getText();
        if(card_id.length()==0 || amt.equals("0.00"))
            return;
        else;
        
        try{
            payFines_ps.clearParameters();
            payFines_ps.setString(1,card_id);
            payFines_ps.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Fine Payment recorded successfully.", "Payment Complete", JOptionPane.INFORMATION_MESSAGE);
            
            //update current data shown in table
            FinesjTableData.setValueAt("0.00", FinesjTable.getSelectedRow(), 2);
            if(FinesFilterUnpaidjRadioButton.isSelected()){
                Float tot = Float.parseFloat((String)FinesjTableData.getValueAt(FinesjTable.getSelectedRow(), 1));
                Float amount = Float.parseFloat((String)FinesjTableData.getValueAt(FinesjTable.getSelectedRow(), 2));
                FinesjTableData.setValueAt(String.format(java.util.Locale.US,"%.2f", tot-amount), FinesjTable.getSelectedRow(), 1);
            }else;
        }catch(SQLException|NumberFormatException e){
            System.err.println("SQL or NumberFormatException Exception in Fines pay button ActionPerformed.");
        }
    }//GEN-LAST:event_FinesPayjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BaseJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane AddUserTab;
    private javax.swing.JPanel AddUserjPanel;
    private javax.swing.JTextField AddressL1jTextField;
    private javax.swing.JTextField AddressL2jTextField;
    private javax.swing.JLabel AddressjLabel;
    private javax.swing.JLabel BCBorrowerCardjLabel;
    private javax.swing.JTextField BCBorrowerCardjTextField;
    private javax.swing.JButton BCCheckoutjButton;
    private javax.swing.JScrollPane BCResjScrollPane;
    private javax.swing.JTable BCResjTable;
    private javax.swing.JButton BCSearchjButton;
    private javax.swing.JPanel BookCheckoutjPanel;
    private javax.swing.JLabel BooksCheckoutjLabel;
    private javax.swing.JButton CheckInSearchjButton;
    private javax.swing.JTextField CheckInSearchjTextField;
    private javax.swing.JButton CheckInjButton;
    private javax.swing.JLabel CheckInjLabel;
    private javax.swing.JPanel CheckInjPanel;
    private javax.swing.JScrollPane CheckInjScrollPane;
    private javax.swing.JTable CheckInjTable;
    private javax.swing.JTextField CityjTextField;
    private javax.swing.JLabel FinesBorrowerIDjLabel;
    private javax.swing.JTextField FinesBorrowerIDjTextField;
    private javax.swing.JRadioButton FinesFilterAlljRadioButton;
    private javax.swing.JRadioButton FinesFilterUnpaidjRadioButton;
    private javax.swing.ButtonGroup FinesFilterbuttonGroup;
    private javax.swing.JLabel FinesFilterjLabel;
    private javax.swing.JFormattedTextField FinesPayAmountjFormattedTextField;
    private javax.swing.JLabel FinesPayAmountjLabel;
    private javax.swing.JButton FinesPayjButton;
    private javax.swing.JButton FinesUpdatejButton;
    private javax.swing.JLabel FinesjLabel;
    private javax.swing.JPanel FinesjPanel;
    private javax.swing.JScrollPane FinesjScrollPane;
    private javax.swing.JTable FinesjTable;
    private javax.swing.JTextField FirstNamejTextField;
    private javax.swing.JTextField LastNamejTextField;
    private javax.swing.JLabel NamejLabel;
    private javax.swing.JLabel NamejLabel1;
    private javax.swing.JFormattedTextField PhonejFormattedTextField;
    private javax.swing.JLabel PhonejLabel;
    private javax.swing.JLabel RegisterNewUserjLabel;
    private javax.swing.JButton RegisterUserjButton;
    private javax.swing.JFormattedTextField SSNjFormattedTextField;
    private javax.swing.JTextField SearchjTextField;
    private javax.swing.JButton ShowFinesjButton;
    private javax.swing.JComboBox<String> StatejComboBox;
    // End of variables declaration//GEN-END:variables
    private java.util.ResourceBundle reader = null;
    private java.sql.Connection dbConnection = null;
    //private TableModel BCResjTableData;
    private DefaultTableModel BCResjTableData;
    private DefaultTableModel CheckInResjTableData;
    private DefaultTableModel FinesjTableData;
    private PreparedStatement borrower_possession_ps;
    private PreparedStatement book_checkout_ps;
    private PreparedStatement single_key_10_digits_ps;
    private PreparedStatement single_key_multi_digits_ps;
    private PreparedStatement single_key_alpha_ps;
    private PreparedStatement single_key_alnum_ps;
    private PreparedStatement multi_key_ps;
    private PreparedStatement check_in_ISBN_ps;
    private PreparedStatement check_in_Card_Id_ps;
    private PreparedStatement check_in_Name_ps;
    private PreparedStatement check_in_update_ps;
    private PreparedStatement payFines_ps;
    private Statement getFines;
    private float max_fine_payable;

    private void createDBConnection() throws java.sql.SQLException, ClassNotFoundException{
        
        //System.out.println("Driver registered.");
        reader = java.util.ResourceBundle.getBundle("librarymanagement/dbconfig");
        Class.forName(reader.getString("db.driverClass"));
        //System.out.println(reader.getString("db.url"));
        //System.out.println(reader.getString("db.username"));
        //System.out.println(reader.getString("db.password"));
        dbConnection = java.sql.DriverManager.getConnection(reader.getString("db.url"),reader.getString("db.username"),reader.getString("db.password"));
        //dbConnection = java.sql.DriverManager.getConnection("jdbc:mysql://localhost:3306/LIBRARY","librarian","booklover");
        borrower_possession_ps = dbConnection.prepareStatement("SELECT POSSESSION FROM BORROWER WHERE CARD_ID = ?");
        book_checkout_ps = dbConnection.prepareStatement("INSERT INTO BOOK_LOANS(ISBN , CARD_ID , DATE_OUT , DUE_DATE) VALUES(?,?,CURDATE(),CURDATE()+14)");
        single_key_10_digits_ps = dbConnection.prepareStatement("SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE ISBN = ? OR TITLE LIKE ?");
        single_key_multi_digits_ps = dbConnection.prepareStatement("SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE TITLE LIKE ?");
        single_key_alpha_ps = dbConnection.prepareStatement("SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE TITLE LIKE ? OR NAME LIKE ?");
        single_key_alnum_ps = dbConnection.prepareStatement("SELECT ISBN, TITLE, NAME, AVAILABILITY FROM BOOK NATURAL JOIN BOOK_AUTHORS NATURAL JOIN AUTHORS WHERE TITLE LIKE ?");
        check_in_ISBN_ps = dbConnection.prepareStatement("SELECT LOAN_ID, ISBN, CARD_ID FROM BOOK_LOANS WHERE DATE_IN IS NULL AND ISBN = ?");
        check_in_Card_Id_ps = dbConnection.prepareStatement("SELECT LOAN_ID, ISBN, CARD_ID FROM BOOK_LOANS WHERE DATE_IN IS NULL AND CARD_ID = ?");
        check_in_Name_ps = dbConnection.prepareStatement("SELECT LOAN_ID, ISBN, BL.CARD_ID FROM BOOK_LOANS BL WHERE DATE_IN IS NULL AND CARD_ID IN (SELECT B.CARD_ID FROM BORROWER B WHERE B.BNAME LIKE ?)");
        check_in_update_ps = dbConnection.prepareStatement("UPDATE BOOK_LOANS SET DATE_IN = CURDATE() WHERE LOAN_ID = ?");
        getFines = dbConnection.createStatement();
        payFines_ps = dbConnection.prepareStatement("UPDATE FINES SET PAID = TRUE WHERE PAID = FALSE AND LOAN_ID IN (SELECT V.LOAN_ID FROM BOOK_LOANS_LITE V WHERE V.DATE_IN IS NOT NULL AND V.CARD_ID = ?)");
    }
    
    public static final int MYSQL_DUPLICATE_PK_ERROR_CODE = 1062;
    public static final int MAX_BOOKS_PER_BORROWER = 3;
}
/*
    USE ISBN10
    BOOK_LOANS: DATE_IN DEFAULT NULL
    BORROWER AUGMENTED WITH INTEGER FIELD POSSESSION
    BOOK AUGMENTED WITH AVAILABILITY BOOLEAN TYPE
    
    IN SEARCH FIELD:
    -ASSUME ISBN10 MUST BE FULLY ENTERED
    -SPLIT ENTERED WORDS ON SPACE
    -IF WORD IS 10 DIGITS CANDIDATE FOR ISBN10 AND TITLE
    -IF WORD IS DIGITS(NOT 10 LONG) CANDIDATE FOR TITLE SUBSTRING
    -IF WORD IS ALNUM CANDIDATE FOR TITLE
    -IF WORD IS ALPHA CANDIDATE FOR TITLE, AUTHOR


    FINES TAB:
    -DISPLAY CARD_ID, TOTAL FINE, PAYABLE FINE
    -FOR THE ABOVE, USE LEFT JOIN OF TWO SELECTS : ONE FOR TOTAL FINE, THE OTHER FOR PAYABLE FINE
    -   PARSE THE TABLE AND REPLACE NULLS WITH 0.0
    -   FINES MUST BE PAID IN FULL
    -WHEN ROW IN TABLE IS SELECTED, UPDATED THE BORROWER ID FIELD AND MAX FINE PAYABLE FIELD(HIDDEN)

    -BOOK_LOANS_LITE VIEW OF LOAN_ID, CARD_ID, DATE_IN
*/