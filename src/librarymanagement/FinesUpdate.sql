DROP PROCEDURE IF EXISTS FINES_BATCH;
DELIMITER ;;

CREATE PROCEDURE FINES_BATCH()
BEGIN
DECLARE n INT DEFAULT 0;
DECLARE i INT DEFAULT 0;
DECLARE L_ID VARCHAR(25);
DECLARE D_DUE DATE;
DECLARE D_IN DATE;
DECLARE AMT FLOAT(7,2) DEFAULT 0.0;

DECLARE EXIT HANDLER FOR SQLEXCEPTION
BEGIN
    ROLLBACK;
END;

START TRANSACTION;

SELECT COUNT(*) FROM BOOK_LOANS	WHERE CURDATE()>DUE_DATE INTO n;
SET i=0;
WHILE i<n DO
	SELECT LOAN_ID, DUE_DATE, DATE_IN FROM BOOK_LOANS WHERE CURDATE()>DUE_DATE LIMIT i,1 INTO L_ID, D_DUE, D_IN;
        SELECT L_ID, D_DUE, D_IN;
	/*CASE WHEN D_IN IS NOT NULL THEN SET AMT = DATEDIFF(D_IN,D_DUE)*0.25 ELSE SET AMT = DATEDIFF(CURRDATE(),D_DUE)*0.25 END;*/
        /*SET AMT = CASE WHEN D_IN IS NOT NULL THEN DATEDIFF(D_IN,D_DUE)*0.25 ELSE DATEDIFF(CURRDATE(),D_DUE)*0.25 END;*/
        /*SELECT D_IN; SET AMT = 1.0; SELECT AMT; */
        /*SELECT (DATEDIFF(CURDATE(),D_DUE)+1)*0.25 AS VAL;*/
        /*SELECT IF(D_IN IS NULL, (DATEDIFF(CURRDATE(),D_DUE)+1)*0.25, (DATEDIFF(D_IN,D_DUE)+1)*0.25) AS AMT;*/
        /*SELECT "WORLD";*/
        /*SELECT CURDATE();
        SELECT (DATEDIFF(CURDATE(),D_DUE)+1);
        SELECT DATEDIFF(CURDATE(),D_DUE);*/
        SET AMT = IF(D_IN IS NOT NULL, (DATEDIFF(D_IN,D_DUE))*0.25, (DATEDIFF(CURDATE(),D_DUE))*0.25);
        /*IF (D_IN IS NULL) THEN
            SET AMT = (DATEDIFF(CURDATE(),D_DUE)+1)*0.25;
            /*SELECT "NULL CASE";* /
        ELSE
            SET AMT = (DATEDIFF(CURDATE(),D_DUE)+1)*0.25;
            /*SELECT "NOT NULL CASE";* /
        END IF;*/
        /*SELECT L_ID, D_DUE, D_IN;*/
	/*INSERT INTO FINES VALUES(L_ID, AMT,FALSE) ON DUPLICATE KEY UPDATE CASE WHEN PAID == FALSE SET FINE_AMT = AMT WHERE LOAN_ID = L_ID END;*/
        SELECT AMT;
        INSERT INTO FINES VALUES(L_ID, AMT,FALSE) ON DUPLICATE KEY UPDATE FINE_AMT = IF(PAID=FALSE, AMT, FINE_AMT);
        SET i = i+1;
END WHILE;

COMMIT;
END;;

DELIMITER ;